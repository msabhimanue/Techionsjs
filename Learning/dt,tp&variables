# JavaScript Data Types:

String: Represents text.
Number: Represents numeric values.
BigInt: For integers too large for the Number type.
Boolean: True or false values.
Undefined: A variable declared but not assigned a value.
Null: Represents a non-existent or invalid value.
Symbol: Unique identifiers.
Object: Can store collections like arrays, functions, or user-defined objects.
Object Examples:

 
let person = { firstName: "John", lastName: "Doe" };
const cars = ["Saab", "Volvo", "BMW"];
Key Points:

Dynamic Typing: A variable's type can change during execution.
String Operations: Concatenating numbers with strings turns them into strings.
 
let x = 16 + "Volvo";  // "16Volvo"
typeof Operator: Returns the type of a variable.
 
typeof 3;  // "number"
JavaScript Variables:

Declared with let, const, or var (best to avoid var).
const is for values that shouldn't change.
let allows reassignment, unlike const.
Variables can be declared together or in separate statements.
Examples:

 
let x = 5, y = 6;
const carName = "Volvo";
Arithmetic and Concatenation:

Operations with numbers and strings:
 
let result = 2 + 3 + "5";  // "55"
Identifiers: Names for variables must be unique and follow naming rules (e.g., can contain letters, digits, underscores, and dollar signs). Names are case-sensitive.

# JavaScripy TypeConversion
JavaScript allows automatic and explicit type conversion between different data types. This can be done manually using functions or automatically by JavaScript itself.

Converting Strings to Numbers
Number() converts a string to a number.
A numeric string like "3.14" converts to a number 3.14.
An empty string "" converts to 0.
Non-numeric strings like "John" convert to NaN (Not a Number).
Example:
js
Copy code
Number("3.14"); // 3.14
Number("");     // 0
Number("John"); // NaN
Other methods to convert strings to numbers:

parseFloat(): Converts a string to a floating point number.
parseInt(): Converts a string to an integer.
Unary + operator:

js
Copy code
let y = "5";  // y is a string
let x = +y;   // x is a number (5)
If the conversion fails, the result is NaN.

Converting Numbers to Strings
String() converts a number to a string.
js
Copy code
String(123);      // "123"
String(100 + 23); // "123"
toString() method:

js
Copy code
(123).toString(); // "123"
Converting Dates to Numbers
Number() or getTime() converts a date to a number (milliseconds since January 1, 1970).
js
Copy code
let d = new Date();
Number(d);      // 1404568027739
d.getTime();    // 1404568027739
Converting Dates to Strings
String() converts a date to a string.
js
Copy code
String(new Date());  // "Thu Jul 17 2014 15:38:19 GMT+0200"
Converting Booleans to Numbers
Number() converts booleans to numbers: false becomes 0 and true becomes 1.
js
Copy code
Number(false); // 0
Number(true);  // 1
Converting Booleans to Strings
String() converts booleans to strings: "false" or "true".
js
Copy code
String(false); // "false"
String(true);  // "true"
Automatic Type Conversion (Type Coercion)
JavaScript can automatically convert values to the appropriate type when necessary, but it may lead to unexpected results:

js
Copy code
5 + null       // 5 (null is converted to 0)
"5" + null    // "5null" (null is converted to "null")
"5" - 2       // 3 (string "5" is converted to number 5)
"5" * "2"     // 10 (both "5" and "2" are converted to numbers)
Automatic String Conversion
JavaScript automatically calls toString() when you output an object or variable:

For objects: {name: "John"} becomes "[object Object]".
For arrays: [1, 2, 3] becomes "1,2,3".
For dates: new Date() becomes "Fri Jul 18 2014 09:08:55 GMT+0200".
JavaScript Type Conversion Table
Original Value	Converted to Number	Converted to String	Converted to Boolean
false	0	"false"	false
true	1	"true"	true
0	0	"0"	false
1	1	"1"	true
"0"	0	"0"	true
"1"	1	"1"	true
"twenty"	NaN	"twenty"	true
null	0	"null"	false
undefined	NaN	"undefined"	false
This table shows various data types and their conversion results when converted to Number, String, and Boolean. Unexpected conversions (e.g., empty strings or objects) can happen, which is important to keep in mind while programming.

# JavaScript Variables:
Types of Variable Declarations:
Automatically: Variables declared without a keyword (not recommended).
var: Declares variables (used before ES6, avoid in modern code).
let: Declares block-scoped variables (modern).
const: Declares variables with constant values (cannot be reassigned).
Examples:

 
let x = 5;
const price1 = 6;
let total = price1 + x;
When to Use:
Use const for variables that won't change (or change in a specific manner).
Use let for variables that can change.
Use var only for supporting older browsers.
Identifiers (Variable Names):
Must be unique and follow rules:
Can contain letters, digits, underscores (_), and dollar signs ($).
Must start with a letter, _, or $.
Case-sensitive (e.g., x and X are different).
Cannot use reserved words.
Assignment Operator:
The = sign is used for assignment, not equality.
For equality comparison, use == or ===.
Example:
 
let x = 5; 
x = x + 1; // x is now 6
Declaring and Assigning Variables:
Declare a variable with let, const, or var.
Assign a value using the = sign.
 
let carName = "Volvo";
Re-declaring Variables:
var allows redeclaration without error.
let and const do not allow redeclaration.
Arithmetic:
Use JavaScript arithmetic operators (+, -, *, /).
Concatenate strings with +.
Example of Concatenation:
 
let x = "Hello " + "World"; // "Hello World"
Special Characters in Identifiers:
$ and _ are valid in identifiers but not commonly used unless for special conventions like jQuery for $ or private variables for _.
 
let $variable = "Hello";
let _hidden = 42;